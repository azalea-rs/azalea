// This file was @generated by codegen/lib/code/tags.py, don't edit it manually!

use std::{collections::HashSet, sync::LazyLock};

use crate::EntityKind;

pub static AQUATIC: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Turtle,
        EntityKind::Axolotl,
        EntityKind::Guardian,
        EntityKind::ElderGuardian,
        EntityKind::Cod,
        EntityKind::Pufferfish,
        EntityKind::Salmon,
        EntityKind::TropicalFish,
        EntityKind::Dolphin,
        EntityKind::Squid,
        EntityKind::GlowSquid,
        EntityKind::Tadpole,
    ])
});
pub static ARROWS: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Arrow, EntityKind::SpectralArrow]));
pub static ARTHROPOD: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Bee,
        EntityKind::Endermite,
        EntityKind::Silverfish,
        EntityKind::Spider,
        EntityKind::CaveSpider,
    ])
});
pub static AXOLOTL_ALWAYS_HOSTILES: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Drowned,
        EntityKind::Guardian,
        EntityKind::ElderGuardian,
    ])
});
pub static AXOLOTL_HUNT_TARGETS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::TropicalFish,
        EntityKind::Pufferfish,
        EntityKind::Salmon,
        EntityKind::Cod,
        EntityKind::Squid,
        EntityKind::GlowSquid,
        EntityKind::Tadpole,
    ])
});
pub static BEEHIVE_INHABITORS: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Bee]));
pub static BOAT: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::OakBoat,
        EntityKind::SpruceBoat,
        EntityKind::BirchBoat,
        EntityKind::JungleBoat,
        EntityKind::AcaciaBoat,
        EntityKind::CherryBoat,
        EntityKind::DarkOakBoat,
        EntityKind::PaleOakBoat,
        EntityKind::MangroveBoat,
        EntityKind::BambooRaft,
    ])
});
pub static CAN_BREATHE_UNDER_WATER: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Axolotl,
        EntityKind::Frog,
        EntityKind::Guardian,
        EntityKind::ElderGuardian,
        EntityKind::Turtle,
        EntityKind::GlowSquid,
        EntityKind::Cod,
        EntityKind::Pufferfish,
        EntityKind::Salmon,
        EntityKind::Squid,
        EntityKind::TropicalFish,
        EntityKind::Tadpole,
        EntityKind::ArmorStand,
        EntityKind::Wither,
        EntityKind::Phantom,
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
pub static CAN_EQUIP_HARNESS: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::HappyGhast]));
pub static CAN_EQUIP_SADDLE: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Horse,
        EntityKind::SkeletonHorse,
        EntityKind::ZombieHorse,
        EntityKind::Donkey,
        EntityKind::Mule,
        EntityKind::Pig,
        EntityKind::Strider,
        EntityKind::Camel,
    ])
});
pub static CAN_TURN_IN_BOATS: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Breeze]));
pub static CAN_WEAR_HORSE_ARMOR: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Horse]));
pub static DEFLECTS_PROJECTILES: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Breeze]));
pub static DISMOUNTS_UNDERWATER: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Camel,
        EntityKind::Chicken,
        EntityKind::Donkey,
        EntityKind::HappyGhast,
        EntityKind::Horse,
        EntityKind::Llama,
        EntityKind::Mule,
        EntityKind::Pig,
        EntityKind::Ravager,
        EntityKind::Spider,
        EntityKind::Strider,
        EntityKind::TraderLlama,
        EntityKind::ZombieHorse,
    ])
});
pub static FALL_DAMAGE_IMMUNE: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::IronGolem,
        EntityKind::SnowGolem,
        EntityKind::Shulker,
        EntityKind::Allay,
        EntityKind::Bat,
        EntityKind::Bee,
        EntityKind::Blaze,
        EntityKind::Cat,
        EntityKind::Chicken,
        EntityKind::Ghast,
        EntityKind::HappyGhast,
        EntityKind::Phantom,
        EntityKind::MagmaCube,
        EntityKind::Ocelot,
        EntityKind::Parrot,
        EntityKind::Wither,
        EntityKind::Breeze,
    ])
});
pub static FOLLOWABLE_FRIENDLY_MOBS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Armadillo,
        EntityKind::Bee,
        EntityKind::Camel,
        EntityKind::Cat,
        EntityKind::Chicken,
        EntityKind::Cow,
        EntityKind::Donkey,
        EntityKind::Fox,
        EntityKind::Goat,
        EntityKind::HappyGhast,
        EntityKind::Horse,
        EntityKind::SkeletonHorse,
        EntityKind::Llama,
        EntityKind::Mule,
        EntityKind::Ocelot,
        EntityKind::Panda,
        EntityKind::Parrot,
        EntityKind::Pig,
        EntityKind::PolarBear,
        EntityKind::Rabbit,
        EntityKind::Sheep,
        EntityKind::Sniffer,
        EntityKind::Strider,
        EntityKind::Villager,
        EntityKind::Wolf,
    ])
});
pub static FREEZE_HURTS_EXTRA_TYPES: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Strider,
        EntityKind::Blaze,
        EntityKind::MagmaCube,
    ])
});
pub static FREEZE_IMMUNE_ENTITY_TYPES: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Stray,
        EntityKind::PolarBear,
        EntityKind::SnowGolem,
        EntityKind::Wither,
    ])
});
pub static FROG_FOOD: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Slime, EntityKind::MagmaCube]));
pub static IGNORES_POISON_AND_REGEN: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Wither,
        EntityKind::Phantom,
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
pub static ILLAGER: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Evoker,
        EntityKind::Illusioner,
        EntityKind::Pillager,
        EntityKind::Vindicator,
    ])
});
pub static ILLAGER_FRIENDS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Evoker,
        EntityKind::Illusioner,
        EntityKind::Pillager,
        EntityKind::Vindicator,
    ])
});
pub static IMMUNE_TO_INFESTED: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Silverfish]));
pub static IMMUNE_TO_OOZING: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Slime]));
pub static IMPACT_PROJECTILES: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::FireworkRocket,
        EntityKind::Snowball,
        EntityKind::Fireball,
        EntityKind::SmallFireball,
        EntityKind::Egg,
        EntityKind::Trident,
        EntityKind::DragonFireball,
        EntityKind::WitherSkull,
        EntityKind::WindCharge,
        EntityKind::BreezeWindCharge,
        EntityKind::Arrow,
        EntityKind::SpectralArrow,
    ])
});
pub static INVERTED_HEALING_AND_HARM: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Wither,
        EntityKind::Phantom,
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
pub static NO_ANGER_FROM_WIND_CHARGE: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Breeze,
        EntityKind::Skeleton,
        EntityKind::Bogged,
        EntityKind::Stray,
        EntityKind::Zombie,
        EntityKind::Husk,
        EntityKind::Spider,
        EntityKind::CaveSpider,
        EntityKind::Slime,
    ])
});
pub static NON_CONTROLLING_RIDER: LazyLock<HashSet<EntityKind>> =
    LazyLock::new(|| HashSet::from_iter(vec![EntityKind::Slime, EntityKind::MagmaCube]));
pub static NOT_SCARY_FOR_PUFFERFISH: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Turtle,
        EntityKind::Guardian,
        EntityKind::ElderGuardian,
        EntityKind::Cod,
        EntityKind::Pufferfish,
        EntityKind::Salmon,
        EntityKind::TropicalFish,
        EntityKind::Dolphin,
        EntityKind::Squid,
        EntityKind::GlowSquid,
        EntityKind::Tadpole,
    ])
});
pub static POWDER_SNOW_WALKABLE_MOBS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Rabbit,
        EntityKind::Endermite,
        EntityKind::Silverfish,
        EntityKind::Fox,
    ])
});
pub static RAIDERS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Evoker,
        EntityKind::Pillager,
        EntityKind::Ravager,
        EntityKind::Vindicator,
        EntityKind::Illusioner,
        EntityKind::Witch,
    ])
});
pub static REDIRECTABLE_PROJECTILE: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Fireball,
        EntityKind::WindCharge,
        EntityKind::BreezeWindCharge,
    ])
});
pub static SENSITIVE_TO_BANE_OF_ARTHROPODS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Bee,
        EntityKind::Endermite,
        EntityKind::Silverfish,
        EntityKind::Spider,
        EntityKind::CaveSpider,
    ])
});
pub static SENSITIVE_TO_IMPALING: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Turtle,
        EntityKind::Axolotl,
        EntityKind::Guardian,
        EntityKind::ElderGuardian,
        EntityKind::Cod,
        EntityKind::Pufferfish,
        EntityKind::Salmon,
        EntityKind::TropicalFish,
        EntityKind::Dolphin,
        EntityKind::Squid,
        EntityKind::GlowSquid,
        EntityKind::Tadpole,
    ])
});
pub static SENSITIVE_TO_SMITE: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Wither,
        EntityKind::Phantom,
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
pub static SKELETONS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
    ])
});
pub static UNDEAD: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Wither,
        EntityKind::Phantom,
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
pub static WITHER_FRIENDS: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::Wither,
        EntityKind::Phantom,
        EntityKind::Skeleton,
        EntityKind::Stray,
        EntityKind::WitherSkeleton,
        EntityKind::SkeletonHorse,
        EntityKind::Bogged,
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
pub static ZOMBIES: LazyLock<HashSet<EntityKind>> = LazyLock::new(|| {
    HashSet::from_iter(vec![
        EntityKind::ZombieHorse,
        EntityKind::Zombie,
        EntityKind::ZombieVillager,
        EntityKind::ZombifiedPiglin,
        EntityKind::Zoglin,
        EntityKind::Drowned,
        EntityKind::Husk,
    ])
});
